name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths: [ 'backend/**' ]
  pull_request:
    branches: [ main, develop ]
    paths: [ 'backend/**' ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PNPM_VERSION: 'latest'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/backend

jobs:
  # Job 1: Code Quality & Testing
  test:
    name: 🧪 Test & Quality Checks
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/pnpm-lock.yaml

      - name: 📦 Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Lint code
        run: pnpm run lint

      - name: 🎨 Check code formatting
        run: pnpm run format --check || (echo "Code formatting issues found. Run 'pnpm run format' to fix." && exit 1)

      - name: 🏗️ Build application
        run: pnpm run build

      - name: 🧪 Run unit tests
        run: pnpm run test:unit

      - name: 🔗 Run integration tests
        run: pnpm run test:integration
        env:
          NODE_ENV: test

      - name: 📊 Generate test coverage
        run: pnpm run test:coverage

      - name: 📈 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

      - name: 🔒 Security audit
        run: pnpm audit --audit-level moderate

  # Job 2: Build Docker Image
  build:
    name: 🐳 Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            PORT=3001

  # Job 3: Deploy to Staging (on main branch)
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "📦 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main"
          echo "🔧 This step would typically:"
          echo "   • Update docker-compose.staging.yml"
          echo "   • Deploy to staging server"
          echo "   • Run smoke tests"
          echo "   • Send notifications"

      # Example deployment step (customize based on your infrastructure)
      # - name: Deploy to staging server
      #   uses: appleboy/ssh-action@v1.0.0
      #   with:
      #     host: ${{ secrets.STAGING_HOST }}
      #     username: ${{ secrets.STAGING_USER }}
      #     key: ${{ secrets.STAGING_KEY }}
      #     script: |
      #       cd /path/to/app
      #       docker-compose -f docker-compose.staging.yml pull
      #       docker-compose -f docker-compose.staging.yml up -d backend
      #       docker system prune -f

  # Job 4: Deploy to Production (manual approval)
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🌟 Deploy to production
        run: |
          echo "🌟 Deploying to production environment..."
          echo "📦 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "🔧 This step would typically:"
          echo "   • Update docker-compose.production.yml"
          echo "   • Deploy to production server"
          echo "   • Run health checks"
          echo "   • Send success notifications"

      # Example production deployment
      # - name: Deploy to production server
      #   uses: appleboy/ssh-action@v1.0.0
      #   with:
      #     host: ${{ secrets.PRODUCTION_HOST }}
      #     username: ${{ secrets.PRODUCTION_USER }}
      #     key: ${{ secrets.PRODUCTION_KEY }}
      #     script: |
      #       cd /path/to/app
      #       docker-compose -f docker-compose.production.yml pull
      #       docker-compose -f docker-compose.production.yml up -d backend
      #       docker system prune -f

  # Job 5: Notification
  notify:
    name: 📢 Send Notifications
    runs-on: ubuntu-latest
    needs: [test, build, deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: 📢 Notification
        run: |
          if [ "${{ needs.test.result }}" == "success" ] && \
             [ "${{ needs.build.result }}" == "success" ]; then
            echo "✅ Pipeline completed successfully!"
          else
            echo "❌ Pipeline failed!"
          fi
          
      # Example Slack notification
      # - name: Send Slack notification
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ job.status }}
      #     channel: '#deployments'
      #     webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      #   if: always() 